import sqlite3
import time
import re
from aiogram import Router, types, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from config import DB_PATH, GROUP_ID, ADMIN_IDS, bot
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

router = Router()

rules_text = (
    "–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –≥—Ä—É–ø–ø—ã üå≤ –ö–ü –ó–µ–ª—ë–Ω—ã–µ –•–æ–ª–º—ã üåª.\n"
    "–û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã —Ä–∞–∑–º–µ—â–µ–Ω—ã –≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–µ–º—ã General. "
    "–° –ø—Ä–∞–≤–∏–ª–æ–º –∫–∞–∂–¥–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–µ–º—ã –≤ –∫–∞–Ω–∞–ª–µ –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–º.\n\n"
    "*–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—Ü–µ–Ω–∏–≤–∞—é—Ç—Å—è –∫–∞–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª:*\n" 
    "1)  –û–¥–Ω–æ –∏ —Ç–æ –∂–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—â–∞—Ç—å –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 5 –¥–Ω–µ–π!\n"
    "2)  –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–∞—Ö –∫–∞–Ω–∞–ª–∞ –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è!\n"
    "3)  –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π —Ä–µ–∫–ª–∞–º—ã –≤ —Ç–µ–º–∞—Ö, –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ, –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è! "
    "(—Å–º. –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ)\n"
    "4)  –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, —É–≥—Ä–æ–∑—ã, –≥—Ä—É–±–æ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç –ø—Ä–∞–≤–∏–ª–∞–º –∫–∞–Ω–∞–ª–∞!\n\n"
    "–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –∏ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ 5 –¥–Ω–µ–π "
    "(–Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª). –¢–∞–∫–∂–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω —Ä—É—á–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã "
    "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞.\n\n"
    "–ï—Å–ª–∏ –≤—ã —É–≤–∏–¥–µ–ª–∏ –æ—à–∏–±–∫—É –≤ —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, "
    "*—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ–∂–∏–º–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (!)*, " 
    "–∞ –Ω–µ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ: –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –¥–Ω–µ–π –±–æ—Ç –Ω–µ –¥–∞—Å—Ç –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ö–æ–∂–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É. " 
    "–í —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞—è—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ @tatarinovkg."
)

@router.message(CommandStart())
async def start(message: Message):
    await message.answer(rules_text, parse_mode="Markdown")

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
def normalize_text(text: str) -> str:
    text = text.lower()
    text = re.sub(r'\s+', ' ', text)
    text = re.sub(r'[^\w\s]', '', text)
    return text.strip()

def get_db_connection():
    conn = sqlite3.connect(DB_PATH)
    return conn


def get_ad_record(user_id: int, photo_id: str, text: str, thread_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    topic_settings = get_topic_settings(thread_id)
    ad_frequency_seconds = topic_settings["ad_frequency_days"] * 24 * 60 * 60
    current_time = int(time.time())
    time_threshold = current_time - ad_frequency_seconds

    result = None

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –∏—â–µ–º –ø–æ photo_id
    if photo_id:
        cursor.execute(
            "SELECT id, thread_id, timestamp, text FROM ads WHERE user_id=? AND photo_id=? AND timestamp >= ?",
            (user_id, photo_id, time_threshold)
        )
        result = cursor.fetchone()  # (id, thread_id, timestamp, text) –∏–ª–∏ None

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –∏—â–µ–º –ø–æ text (–µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    if text and not result:
        cursor.execute(
            "SELECT id, thread_id, timestamp, text FROM ads WHERE user_id=? AND text=? AND timestamp >= ?",
            (user_id, text, time_threshold)
        )
        result = cursor.fetchone()  # (id, thread_id, timestamp, text) –∏–ª–∏ None

    conn.close()
    return result

# –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î
def insert_ad_record(user_id: int, thread_id: int, text: str, photo_id: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    current_time = int(time.time())
    cursor.execute(
        "INSERT INTO ads (user_id, thread_id, text, photo_id, timestamp) VALUES (?, ?, ?, ?, ?)",
        (user_id, thread_id, text, photo_id, current_time)
    )
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∫–ª–∞–º—ã
def update_ad_record(record_id: int, new_thread_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    current_time = int(time.time())
    cursor.execute("UPDATE ads SET timestamp=?, thread_id=? WHERE id=?", (current_time, new_thread_id, record_id))
    conn.commit()
    conn.close()

def get_ad_warnings(user_id: int, ad_key: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT warning_count FROM warnings WHERE user_id=? AND ad_key=?", (user_id, ad_key))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else 0

def increase_ad_warnings(user_id: int, ad_key: str):
    current_warnings = get_ad_warnings(user_id, ad_key)
    conn = get_db_connection()
    cursor = conn.cursor()
    if current_warnings == 0:
        cursor.execute(
            "INSERT INTO warnings (user_id, ad_key, warning_count, last_warning) VALUES (?, ?, ?, ?)",
            (user_id, ad_key, 1, int(time.time()))
        )
    else:
        cursor.execute(
            "UPDATE warnings SET warning_count = warning_count + 1, last_warning=? WHERE user_id=? AND ad_key=?",
            (int(time.time()), user_id, ad_key)
        )
    conn.commit()
    conn.close()
    return current_warnings + 1

def reset_ad_warnings(user_id: int, ad_key: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM warnings WHERE user_id=? AND ad_key=?", (user_id, ad_key))
    conn.commit()
    conn.close()

def get_topic_settings(thread_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT enabled, block_days, warnings_limit, ad_frequency_days FROM topics WHERE thread_id=?", (thread_id,))
    result = cursor.fetchone()
    conn.close()
    if result:
        return {
            "enabled": bool(result[0]),
            "block_days": result[1],
            "warnings_limit": result[2],
            "ad_frequency_days": result[3]
        }
    else:
        return {
            "enabled": True,
            "block_days": 5,
            "warnings_limit": 3,
            "ad_frequency_days": 5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }

def ensure_topic_exists(thread_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT thread_id FROM topics WHERE thread_id=?", (thread_id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO topics (thread_id, enabled, block_days, warnings_limit) VALUES (?, ?, ?, ?)",
            (thread_id, 1, 5, 3)
        )
    conn.commit()
    conn.close()

# –ï—Å–ª–∏ message.message_thread_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–º–∞ General (thread_id = 0)
def get_thread_id(message: Message) -> int:
    return message.message_thread_id if message.message_thread_id is not None else 0

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–º—É General (thread_id = 0)
async def notify_general(text: str):
    try:
        await bot.send_message(chat_id=GROUP_ID, message_thread_id=0, text=text, parse_mode="HTML")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ General:", e)

async def notify_admins_about_ban(user_id: int, first_name: str, reason: str):
    user_link = f'<a href="tg://user?id={user_id}">{first_name}</a>'
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                chat_id=int(admin_id),
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} (ID: {user_id}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}",
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

async def notify_admins_suspicious_similarity(user_id: int, first_name: str, current_text: str, previous_text: str, similarity: float, current_message_link: str):
    user_link = f'<a href="tg://user?id={user_id}">{first_name}</a>'
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                chat_id=int(admin_id),
                text=(
                    f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_link} (ID: {user_id}).\n"
                    f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: <code>{current_text}</code>\n"
                    f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç: <code>{previous_text}</code>\n"
                    f"–°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.2%}\n"
                    f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {current_message_link}"
                ),
                parse_mode="HTML"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")


@router.message(F.chat.id == GROUP_ID)
async def handle_group_message(message: types.Message):
    thread_id = get_thread_id(message)
    ensure_topic_exists(thread_id)
    topic_settings = get_topic_settings(thread_id)
    if not topic_settings["enabled"]:
        return

    user_id = message.from_user.id
    first_name = message.from_user.first_name
    user_link = f'<a href="tg://user?id={user_id}">{first_name}</a>'
    ad_frequency_seconds = topic_settings["ad_frequency_days"] * 24 * 60 * 60

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ
    text_content = message.text or message.caption or ""  # –¢–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å
    norm_text = normalize_text(text_content) if text_content else ""
    photo_id = message.photo[-1].file_id if message.photo else ""  # ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ñ–æ—Ç–æ
    if not photo_id and len(text_content) < 20:
        return

    current_time = int(time.time())
    violation = False
    violation_reason = ""
    matched_ad_key = norm_text if norm_text else photo_id

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "SELECT text, photo_id, timestamp, thread_id FROM ads WHERE user_id=? AND timestamp >= ?",
        (user_id, current_time - ad_frequency_seconds)
    )
    previous_ads = cursor.fetchall()  # (text, photo_id, timestamp, thread_id)
    conn.close()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
    if norm_text:
        ad_record = get_ad_record(user_id, "", norm_text, thread_id)
        if ad_record:
            violation = True
            matched_ad_key = norm_text
            date_str = time.strftime('%d.%m.%Y –≤ %H:%M', time.localtime(ad_record[2]))
            if ad_record[1] == thread_id:
                violation_reason = f"–í—ã —É–∂–µ —Ä–∞–∑–º–µ—â–∞–ª–∏ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —ç—Ç–æ–π —Ç–µ–º–µ {date_str}."
            else:
                violation_reason = f"–í—ã —É–∂–µ —Ä–∞–∑–º–µ—â–∞–ª–∏ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–π —Ç–µ–º–µ {date_str}."
        else:
            for prev_text, prev_photo_id, prev_timestamp, prev_thread_id in previous_ads:
                if prev_text and not prev_photo_id:
                    documents = [prev_text, norm_text]
                    vectorizer = TfidfVectorizer()
                    try:
                        matrix = vectorizer.fit_transform(documents)
                        similarity = cosine_similarity(matrix)[0][1]
                        if similarity >= 0.75:
                            violation = True
                            matched_ad_key = prev_text
                            date_str = time.strftime('%d.%m.%Y –≤ %H:%M', time.localtime(prev_timestamp))
                            similarity_percent = int(similarity * 100)
                            if prev_thread_id == thread_id:
                                violation_reason = (
                                    f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–µ (—Å—Ö–æ–∂–µ—Å—Ç—å {similarity_percent}%) "
                                    f"–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏ –≤ —ç—Ç–æ–π —Ç–µ–º–µ {date_str}."
                                )
                            else:
                                violation_reason = (
                                    f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–µ (—Å—Ö–æ–∂–µ—Å—Ç—å {similarity_percent}%) "
                                    f"–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏ –≤ –¥—Ä—É–≥–æ–π —Ç–µ–º–µ {date_str}."
                                )
                            break
                        elif 0.35 <= similarity < 0.75:
                            current_message_link = f"https://t.me/c/{str(GROUP_ID)[4:]}/{message.message_id}"
                            await notify_admins_suspicious_similarity(
                                user_id, first_name, text_content, prev_text, similarity, current_message_link
                            )
                    except ValueError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
    if photo_id and not violation:
        ad_record = get_ad_record(user_id, photo_id, "", thread_id)
        if ad_record:
            violation = True
            matched_ad_key = photo_id
            date_str = time.strftime('%d.%m.%Y –≤ %H:%M', time.localtime(ad_record[2]))
            if ad_record[1] == thread_id:
                violation_reason = f"–í—ã —É–∂–µ —Ä–∞–∑–º–µ—â–∞–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –≤ —ç—Ç–æ–π —Ç–µ–º–µ {date_str}."
            else:
                violation_reason = f"–í—ã —É–∂–µ —Ä–∞–∑–º–µ—â–∞–ª–∏ —ç—Ç–æ —Ñ–æ—Ç–æ –≤ –¥—Ä—É–≥–æ–π —Ç–µ–º–µ {date_str}."
        elif norm_text and ad_record and ad_record[3]:
            documents = [ad_record[3], norm_text]
            vectorizer = TfidfVectorizer()
            try:
                matrix = vectorizer.fit_transform(documents)
                similarity = cosine_similarity(matrix)[0][1]
                if similarity >= 0.75:
                    violation = True
                    matched_ad_key = ad_record[3]
                    date_str = time.strftime('%d.%m.%Y –≤ %H:%M', time.localtime(ad_record[2]))
                    similarity_percent = int(similarity * 100)
                    if ad_record[1] == thread_id:
                        violation_reason = (
                            f"–í–∞—à–µ —Ñ–æ—Ç–æ —Å –ø–æ—Ö–æ–∂–∏–º —Ç–µ–∫—Å—Ç–æ–º (—Å—Ö–æ–∂–µ—Å—Ç—å {similarity_percent}%) "
                            f"—É–∂–µ –±—ã–ª–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ —ç—Ç–æ–π —Ç–µ–º–µ {date_str}."
                        )
                    else:
                        violation_reason = (
                            f"–í–∞—à–µ —Ñ–æ—Ç–æ —Å –ø–æ—Ö–æ–∂–∏–º —Ç–µ–∫—Å—Ç–æ–º (—Å—Ö–æ–∂–µ—Å—Ç—å {similarity_percent}%) "
                            f"—É–∂–µ –±—ã–ª–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ –¥—Ä—É–≥–æ–π —Ç–µ–º–µ {date_str}."
                        )
            except ValueError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ö–æ–∂–µ—Å—Ç–∏: {e}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    if violation:
        warning_count = increase_ad_warnings(user_id, matched_ad_key)
        if warning_count >= topic_settings["warnings_limit"]:
            block_seconds = topic_settings["block_days"] * 24 * 3600 if topic_settings["block_days"] > 0 else 0
            banned_until = current_time + block_seconds if block_seconds > 0 else 0
            try:
                await bot.restrict_chat_member(
                    chat_id=GROUP_ID,
                    user_id=user_id,
                    permissions=types.ChatPermissions(can_send_messages=False),
                    until_date=banned_until
                )
                block_duration = '–Ω–∞–≤—Å–µ–≥–¥–∞' if topic_settings['block_days'] == 0 else f'–Ω–∞ {topic_settings["block_days"]} –¥–Ω–µ–π'
                block_message = (
                    f"üö´ {user_link}, {violation_reason}\n"
                    f"–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã {block_duration} –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è.\n"
                    f"–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏: <a href=\"https://t.me/greenHillsRulesBot?start=start\">–ü—Ä–∞–≤–∏–ª–∞</a>."
                )
                await message.answer(block_message, disable_web_page_preview=True, parse_mode="HTML")
                await notify_admins_about_ban(user_id, first_name, "–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è")
                add_ban(user_id, first_name, banned_until, "–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {e}")
            reset_ad_warnings(user_id, matched_ad_key)
        else:
            warning_message = (
                f"‚ö†Ô∏è {user_link}, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: {violation_reason}\n"
                f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Ññ {warning_count}/{topic_settings['warnings_limit']}.\n"
                f"–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å <a href=\"https://t.me/greenHillsRulesBot?start=start\">–ø—Ä–∞–≤–∏–ª–∞–º–∏</a>."
            )
            await message.reply(warning_message, disable_web_page_preview=True, parse_mode="HTML")
        await message.delete()
    else:
        insert_ad_record(user_id, thread_id, norm_text, photo_id)

@router.message(F.chat.id == GROUP_ID)
async def handle_suspicious(message: types.Message):
    pass

@router.message(Command("ban"))
async def admin_ban(message: types.Message):
    if message.chat.type != "private":
        return
    if str(message.from_user.id) not in ADMIN_IDS:
        return
    parts = message.text.split()
    if len(parts) != 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /ban+[ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]+[–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π]\n–ü—Ä–∏–º–µ—Ä: /ban 123456789 5")
        return
    try:
        target_user = int(parts[1])
        days = int(parts[2])
        block_seconds = days * 24 * 3600 if days > 0 else 0
        banned_until = int(time.time()) + block_seconds if days > 0 else 0
        try:
            chat_member = await bot.get_chat_member(GROUP_ID, target_user)
            first_name = chat_member.user.first_name
        except Exception:
            first_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        await bot.restrict_chat_member(
            chat_id=GROUP_ID,
            user_id=target_user,
            permissions=types.ChatPermissions(can_send_messages=False),
            until_date=banned_until
        )
        user_link = f'<a href="tg://user?id={target_user}">{first_name}</a>'
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} (ID: {target_user}) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω {'–Ω–∞–≤—Å–µ–≥–¥–∞' if days == 0 else f'–Ω–∞ {days} –¥–Ω–µ–π'}.", parse_mode="HTML")
        add_ban(target_user, first_name, banned_until, "–†—É—á–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        await notify_admins_about_ban(target_user, first_name, "–†—É—á–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ General –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        await notify_general(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} (ID: {target_user}) –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

@router.message(Command("unban"))
async def admin_unban(message: types.Message):
    if message.chat.type != "private":
        return
    if str(message.from_user.id) not in ADMIN_IDS:
        return
    parts = message.text.split()
    if len(parts) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /unban+[ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]\n–ü—Ä–∏–º–µ—Ä: /unban 123456789")
        return
    try:
        target_user = int(parts[1])
        try:
            chat_member = await bot.get_chat_member(GROUP_ID, target_user)
            first_name = chat_member.user.first_name
        except Exception:
            first_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        await bot.restrict_chat_member(
            chat_id=GROUP_ID,
            user_id=target_user,
            permissions=types.ChatPermissions(
                can_send_messages=True,
                can_send_media_messages=True,
                can_send_other_messages=True,
                can_add_web_page_previews=True,
                can_send_polls=True,
                can_change_info=True,
                can_invite_users=True,
                can_pin_messages=True
            ),
            until_date=0
        )
        remove_ban(target_user)
        user_link = f'<a href="tg://user?id={target_user}">{first_name}</a>'
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} (ID: {target_user}) —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", parse_mode="HTML")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ General –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
        await notify_general(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_link} (ID: {target_user}) –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞: {e}")

def add_ban(user_id: int, first_name: str, banned_until: int, reason: str):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO bans (user_id, first_name, banned_until, reason) VALUES (?, ?, ?, ?)",
        (user_id, first_name, banned_until, reason)
    )
    conn.commit()
    conn.close()

def remove_ban(user_id: int):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("DELETE FROM bans WHERE user_id=?", (user_id,))
    conn.commit()
    conn.close()

def get_banned_users():
    conn = get_db_connection()
    cursor = conn.cursor()
    current_time = int(time.time())
    cursor.execute(
        "SELECT user_id, first_name, banned_until, reason FROM bans WHERE banned_until > ? OR banned_until = 0",
        (current_time,)
    )
    result = cursor.fetchall()
    conn.close()
    return result

@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if str(message.from_user.id) not in ADMIN_IDS:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    banned_users = get_banned_users()
    admin_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "<b>–ö–æ–º–∞–Ω–¥–∞:</b> <code>/ban+[ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]+[–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π]</code>\n"
        "‚Äî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π. –ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å 0 –¥–Ω–µ–π, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç –Ω–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–¥–æ –º–æ–º–µ–Ω—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏).\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>/ban 123456789 5</code>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥–∞:</b> <code>/unban+[ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]</code>\n"
        "‚Äî –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>/unban 123456789</code>\n\n"
        "–ü—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–æ–º (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø–µ –∏ –∏–º–µ–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –ª–∏—à–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∞ –∏—Ö –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥–∞:</b> <code>/topics</code>\n"
        "‚Äî –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º.\n"
    )

    if banned_users:
        admin_text += "\n<b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        for user in banned_users:
            user_id, first_name, banned_until, reason = user
            user_link = f'<a href="tg://user?id={user_id}">{first_name}</a>'
            days_left = "–Ω–∞–≤—Å–µ–≥–¥–∞" if banned_until == 0 else round((banned_until - int(time.time())) / (24 * 3600))
            admin_text += f"- {user_link} (ID: {user_id}) ‚Äî {days_left} –¥–Ω., –ø—Ä–∏—á–∏–Ω–∞: {reason}\n"
    else:
        admin_text += "\n<b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.</b>\n"
    await message.reply(admin_text, parse_mode="HTML")

@router.message(Command("topics"))
async def list_topics(message: types.Message):
    # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if message.chat.type != "private":
        return
    if str(message.from_user.id) not in [str(admin) for admin in ADMIN_IDS]:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT thread_id, enabled, block_days, warnings_limit, ad_frequency_days FROM topics")
    topics = cursor.fetchall()
    conn.close()

    if not topics:
        await message.reply("–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    commands_info = (
        "üìã <b>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ <code>/switch+[ID —Ç–µ–º—ã]</code> ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–º—ã (–≤–∫–ª—é—á–µ–Ω–æ/–≤—ã–∫–ª—é—á–µ–Ω–æ).\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/switch 5</code>\n"
        "‚Ä¢ <code>/message+[ID —Ç–µ–º—ã]</code> ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–µ–º—É.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/message 5</code>\n"
        "‚Ä¢ <code>/btime+[ID —Ç–µ–º—ã]+[–∫–æ–ª-–≤–æ –¥–Ω–µ–π –æ—Ç 0 –¥–æ 365]</code> ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ç–µ–º—ã.\n"
        "0 –¥–Ω–µ–π –æ–∑–Ω–∞—á–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É <i>–Ω–∞–≤—Å–µ–≥–¥–∞</i>.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/btime 5 10</code>\n"
        "‚Ä¢ <code>/cwarn+[ID —Ç–µ–º—ã]+[–∫–æ–ª-–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ—Ç 1 –¥–æ 10]</code> ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —á–∏—Å–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.\n"
        "1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Äî –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏).\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/cwarn 5 3</code>\n"
        "‚Ä¢ <code>/sdays+[ID —Ç–µ–º—ã]+[–∫–æ–ª-–≤–æ –¥–Ω–µ–π –æ—Ç 1 –¥–æ 10]</code> ‚Äî —É–∫–∞–∑—ã–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/sdays 0 5</code>\n\n"
        "<b>–°–≤–æ–¥–∫–∞ –ø–æ —Ç–µ–º–∞–º:</b>\n\n"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ
    topics_summary = ""
    for t in topics:
        topic_id, enabled, block_days, warnings_limit, ad_frequency_days = t
        state = "üü¢ –í–∫–ª—é—á–µ–Ω–∞" if enabled else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞"
        ad_interval = f"{ad_frequency_days} –¥–Ω–µ–π"
        block_time = "–Ω–∞–≤—Å–µ–≥–¥–∞" if block_days == 0 else f"{block_days} –¥–Ω–µ–π"
        warn_text = "1 (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ)" if warnings_limit == 1 else f"{warnings_limit}"
        topics_summary += (
            f"<b>–¢–µ–º–∞ (ID):</b> {topic_id}\n"
            f"<b>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {state}\n"
            f"<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Ä–µ–∫–ª–∞–º–Ω—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏:</b> {ad_interval}\n"
            f"<b>–í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {block_time}\n"
            f"<b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:</b> {warn_text}\n\n"
        )

    full_text = commands_info + topics_summary
    await message.reply(full_text, parse_mode="HTML")

def get_topic_status(topic_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–º—ã: 1 ‚Äî –≤–∫–ª—é—á–µ–Ω–∞, 0 ‚Äî –≤—ã–∫–ª—é—á–µ–Ω–∞, None ‚Äî —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT enabled FROM topics WHERE thread_id=?", (topic_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def toggle_topic_status(topic_id: int):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ–º—ã: –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ ‚Äì –≤—ã–∫–ª—é—á–∞–µ—Ç, –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞ ‚Äì –≤–∫–ª—é—á–∞–µ—Ç.
       –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ None, –µ—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT enabled FROM topics WHERE thread_id=?", (topic_id,))
    result = cursor.fetchone()
    if not result:
        conn.close()
        return None
    current_status = result[0]
    new_status = 0 if current_status else 1
    cursor.execute("UPDATE topics SET enabled=? WHERE thread_id=?", (new_status, topic_id))
    conn.commit()
    conn.close()
    return new_status

@router.message(Command("switch"))
async def switch_topic_handler(message: types.Message):
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—ë.
    if message.chat.type != "private":
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.
    if str(message.from_user.id) not in ADMIN_IDS:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: /switch [–Ω–æ–º–µ—Ä —Ç–µ–º—ã])
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip().isdigit():
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /switch+[–Ω–æ–º–µ—Ä —Ç–µ–º—ã]. –ü—Ä–∏–º–µ—Ä: /switch 5")
        return

    topic_id = int(parts[1].strip())
    current_status = get_topic_status(topic_id)
    if current_status is None:
        await message.reply("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    new_status = toggle_topic_status(topic_id)
    status_text = "–≤–∫–ª—é—á–µ–Ω–∞ üü¢" if new_status == 1 else "–≤—ã–∫–ª—é—á–µ–Ω–∞ üî¥"
    await message.reply(f"–¢–µ–º–∞ {topic_id} —Ç–µ–ø–µ—Ä—å {status_text}.")
    await list_topics(message)

@router.message(Command("message"))
async def send_test_message_handler(message: types.Message):
    # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
    if message.chat.type != "private":
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if str(message.from_user.id) not in ADMIN_IDS:
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã (–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç: /message [–Ω–æ–º–µ—Ä —Ç–µ–º—ã])
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip().isdigit():
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /message+[–Ω–æ–º–µ—Ä —Ç–µ–º—ã]. –ü—Ä–∏–º–µ—Ä: /message 5")
        return
    topic_id = int(parts[1].strip())
    current_status = get_topic_status(topic_id)
    if current_status is None:
        await message.reply("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    thread_id = int(parts[1].strip())
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç—É–ø–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–± –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–µ —Ç–µ–º—ã.
    test_text = f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Ç–µ–º—ã. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (ID) —ç—Ç–æ–π —Ç–µ–º—ã: {thread_id}."

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–µ–º—É –≥—Ä—É–ø–ø—ã
        await bot.send_message(chat_id=GROUP_ID, message_thread_id=thread_id, text=test_text)
        await message.reply(f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–º—É —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º (ID) {thread_id}.")
        await list_topics(message)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def update_topic_block_days(topic_id: int, days: int) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (block_days) –≤ —Ç–∞–±–ª–∏—Ü–µ topics –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã.
       –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, False –µ—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT block_days FROM topics WHERE thread_id=?", (topic_id,))
    result = cursor.fetchone()
    if not result:
        conn.close()
        return False
    cursor.execute("UPDATE topics SET block_days=? WHERE thread_id=?", (days, topic_id))
    conn.commit()
    conn.close()
    return True

def update_topic_warnings_limit(topic_id: int, warnings_limit: int) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (warnings_limit) –≤ —Ç–∞–±–ª–∏—Ü–µ topics –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º—ã.
       –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ, False –µ—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT warnings_limit FROM topics WHERE thread_id=?", (topic_id,))
    result = cursor.fetchone()
    if not result:
        conn.close()
        return False
    cursor.execute("UPDATE topics SET warnings_limit=? WHERE thread_id=?", (warnings_limit, topic_id))
    conn.commit()
    conn.close()
    return True


def create_summary_text(topic_id: int) -> str:
    settings = get_topic_settings(topic_id)
    if not settings:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã."
    block_days = settings["block_days"]
    warnings_limit = settings["warnings_limit"]
    ad_frequency = settings["ad_frequency_days"]
    time_text = "–Ω–∞–≤—Å–µ–≥–¥–∞" if block_days == 0 else f"{block_days} –¥–Ω–µ–π"

    if warnings_limit == 1:
        warn_text = "–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ (–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–∏)"
    else:
        warn_text = f"–ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è {warnings_limit} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"

    summary = (f"–°–≤–æ–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–º—ã {topic_id}:\n"
               f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –æ–¥–∏–Ω —Ç–∏–ø —Ä–µ–∫–ª–∞–º—ã –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ {ad_frequency} –¥–Ω–µ–π.\n"
               f"‚Ä¢ –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {time_text}\n"
               f"‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç {warn_text}.\n\n"
               f"–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, "
               f"—Ç–æ –µ—Å—Ç—å –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞—Ç—å –∏—Ö –≤ –≥—Ä—É–ø–ø–µ –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –Ω–∞–≤—Å–µ–≥–¥–∞.")
    return summary


@router.message(Command("btime"))
async def set_block_time_handler(message: types.Message):
    # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.
    if message.chat.type != "private":
        return
    if str(message.from_user.id) not in ADMIN_IDS:
        return

    parts = message.text.split()
    if len(parts) != 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /btime+[ID —Ç–µ–º—ã]+[–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Ç 0 –¥–æ 365]. –ü—Ä–∏–º–µ—Ä: /btime 5 10")
        return

    topic_id_str, days_str = parts[1], parts[2]
    if not topic_id_str.isdigit() or not days_str.isdigit():
        await message.reply("ID —Ç–µ–º—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.")
        return

    topic_id = int(topic_id_str)
    days = int(days_str)
    if days < 0 or days > 365:
        await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 365.")
        return

    success = update_topic_block_days(topic_id, days)
    if not success:
        await message.reply("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    time_text = "–Ω–∞–≤—Å–µ–≥–¥–∞" if days == 0 else f"{days} –¥–Ω–µ–π"
    await message.reply(f"–í —Ç–µ–º–µ {topic_id} –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {time_text}.")
    await list_topics(message)

    summary = create_summary_text(topic_id)
    try:
        await bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=topic_id,
            text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã –∏–∑–º–µ–Ω–µ–Ω—ã.\n{summary}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–º—É {topic_id}: {e}")


@router.message(Command("cwarn"))
async def set_warnings_limit_handler(message: types.Message):
    # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.
    if message.chat.type != "private":
        return
    if str(message.from_user.id) not in ADMIN_IDS:
        return

    parts = message.text.split()
    if len(parts) != 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cwarn+[ID —Ç–µ–º—ã]+[–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–æ—Ç 1 –¥–æ 10)]. –ü—Ä–∏–º–µ—Ä: /cwarn 5 3")
        return

    topic_id_str, warn_str = parts[1], parts[2]
    if not topic_id_str.isdigit() or not warn_str.isdigit():
        await message.reply("ID —Ç–µ–º—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.")
        return

    topic_id = int(topic_id_str)
    warnings_limit = int(warn_str)
    if warnings_limit < 1 or warnings_limit > 10:
        await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.")
        return

    success = update_topic_warnings_limit(topic_id, warnings_limit)
    if not success:
        await message.reply("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    await message.reply(f"–í —Ç–µ–º–µ {topic_id} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {warnings_limit}.")
    await list_topics(message)

    summary = create_summary_text(topic_id)
    try:
        await bot.send_message(
            chat_id=GROUP_ID,
            message_thread_id=topic_id,
            text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã –∏–∑–º–µ–Ω–µ–Ω—ã.\n{summary}"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–º—É {topic_id}: {e}")

@router.message(Command("sdays"))
async def set_ad_frequency(message: types.Message):
    # –ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.
    if message.chat.type != "private":
        return
    if str(message.from_user.id) not in ADMIN_IDS:
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split()
    if len(parts) !=3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /sdays+[ID —Ç–µ–º—ã]+[–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –æ—Ç 1 –¥–æ 10]. –ü—Ä–∏–º–µ—Ä: /sdays 0 5")
        return

    thread_id = parts[1]
    if not thread_id.isdigit():
        await message.reply("ID —Ç–µ–º—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (5 –¥–Ω–µ–π)
    days = 5
    if len(parts) == 3:
        if not parts[2].isdigit() or not (1 <= int(parts[2]) <= 10):
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10.")
            return
        days = int(parts[2])

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE topics SET ad_frequency_days=? WHERE thread_id=?",
        (days, thread_id)
    )
    conn.commit()
    conn.close()
    if cursor.rowcount == 0:
        await message.reply(f"–¢–µ–º–∞ —Å ID {thread_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        await message.reply(f"–ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã –¥–ª—è —Ç–µ–º—ã {thread_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π.")
        await list_topics(message)

        summary = create_summary_text(int(thread_id))
        try:
            await bot.send_message(
                chat_id=GROUP_ID,
                message_thread_id=thread_id,
                text=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã –∏–∑–º–µ–Ω–µ–Ω—ã.\n{summary}"
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–º—É {thread_id}: {e}")
